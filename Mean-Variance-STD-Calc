#project instructions below

#Create a function named calculate() in mean_var_std.py that uses Numpy to output the mean, variance, standard deviation, max, min, and sum of the rows, columns, and elements in a 3 x 3 matrix.
#The input of the function should be a list containing 9 digits. The function should convert the list into a 3 x 3 Numpy array, and then return a dictionary containing the mean, variance, standard deviation, max, min, and sum along both axes and for the flattened matrix.
#The returned dictionary should follow this format:
#{'mean': [axis1, axis2, flattened],
  #'variance': [axis1, axis2, flattened],
  #'standard deviation': [axis1, axis2, flattened],
  #'max': [axis1, axis2, flattened],
  #'min': [axis1, axis2, flattened],
  #'sum': [axis1, axis2, flattened]}
#If a list containing less than 9 elements is passed into the function, it should raise a ValueError exception with the message: "List must contain nine numbers." The values in the returned dictionary should be lists and not Numpy arrays.








import numpy as np

#Below calculated the number of entries in the list and ensures only 9 entries
def calculate(list):
    if len(list) != 9:
        raise ValueError("List must contain nine numbers")
    
    # Below convert list to 3x3 array
    nparray = np.array(list).reshape(3, 3)

    # Below Dictionary Content
    calculations = {
        'mean': [mean_axis1, mean_axis2, mean_flattened],
        'variance': [variance_axis1, variance_axis2, variance_flattened],
        'standard deviation': [std_dev_axis1, std_dev_axis2, std_dev_flattened],
        'max': [max_axis1, max_axis2, max_flattened],
        'min': [min_axis1, min_axis2, min_flattened],
        'sum': [sum_axis1, sum_axis2, sum_flattened]
    
    # Below Steps to calculate the required values
    mean_axis1 = np.mean(nparray, axis=0).tolist()
    mean_axis2 = np.mean(nparray, axis=1).tolist()
    mean_flattened = np.mean(nparray).tolist()
    
    variance_axis1 = np.var(nparray, axis=0).tolist()
    variance_axis2 = np.var(nparray, axis=1).tolist()
    variance_flattened = np.var(nparray).tolist()
    
    std_dev_axis1 = np.std(nparray, axis=0).tolist()
    std_dev_axis2 = np.std(nparray, axis=1).tolist()
    std_dev_flattened = np.std(nparray).tolist()
    
    max_axis1 = np.max(nparray, axis=0).tolist()
    max_axis2 = np.max(nparray, axis=1).tolist()
    max_flattened = np.max(nparray).tolist()
    
    min_axis1 = np.min(nparray, axis=0).tolist()
    min_axis2 = np.min(nparray, axis=1).tolist()
    min_flattened = np.min(nparray).tolist()
    
    sum_axis1 = np.sum(nparray, axis=0).tolist()
    sum_axis2 = np.sum(nparray, axis=1).tolist()
    sum_flattened = np.sum(nparray).tolist()
    
    return calculations
